java1.5起默认的三个annotation类型:
	@Override:  只能用在方法之上的，用来告诉别人这一个方法是改写父类的。 
	@Deprecated: 建议别人不要使用旧的API的时候用的,编译的时候会用产生警告信息,可以设定在程序里的所有的元素上. 
	@SuppressWarnings:这一个类型可以来暂时把一些警告信息消息关闭. 
	
(#@#)怎样设计自己的annotation:

一,首先在jdk自带的java.lang.annotation包里,打开如下几个源文件:
1、源文件Target.java 
@Documented  
@Retention(RetentionPolicy.RUNTIME)   
@Target(ElementType.ANNOTATION_TYPE)   
public @interface Target {   
	ElementType[] value();   
} 
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION_TYPE)
public @interface Target {
	ElementType[] value();
}
其中的@interface是一个关键字，在设计annotations的时候必须把一 个类型定义为@interface，而不能用class或interface关键字

2、源文件Retention.java
@Documented  
@Retention(RetentionPolicy.RUNTIME)   
@Target(ElementType.ANNOTATION_TYPE)   
public @interface Retention {   
	RetentionPolicy value();   
}


上面的文件都用到了RetentionPolicy，ElementType这两个字段
3、源文件RetentionPolicy.java
public enum RetentionPolicy {   
	SOURCE,   
	CLASS,   
	RUNTIME   
} 
SOURCE代表的是这个Annotation类型的信息只会保留在程序源码里，源码如果经过了编译之后，Annotation的数据就会消失,并不会保留在编译好的.class文件里面。 
ClASS的意思是这个Annotation类型的信息保留在程序源码里,同时也会保留在编译好的.class文件里面,在执行的时候，并不会把这一些信息加载到虚拟机(JVM)中去.注意一下，当你没有设定一个Annotation类型的Retention值时，系统默认值是CLASS. 
RUNTIME,表示在源码、编译好的.class文件中保留信息，在执行的时候会把这一些信息加载到JVM中去的． 

4、源文件ElementType.java 
public enum ElementType {   
	TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR,   
	LOCAL_VARIABLE, ANNOTATION_TYPE,PACKAGE   
} 
＠Target里面的ElementType是用来指定Annotation类型可以用在哪一些元素上的.
取值				注解使用范围
METHOD				可用于方法上
TYPE				可用于类或者接口上
ANNOTATION_TYPE		可用于注解类型上（被@interface修饰的类型）
CONSTRUCTOR			可用于构造方法上
FIELD				可用于域上
LOCAL_VARIABLE		可用于局部变量上
PACKAGE				可用于记录java文件的package信息
PARAMETER			可用于参数上


下面讲的设计一个最简单的Annotation例子,这一例子共用四个文件; 
1、Description.java   
	import java.lang.annotation.Documented;
	import java.lang.annotation.ElementType;
	import java.lang.annotation.Retention;
	import java.lang.annotation.RetentionPolicy;
	import java.lang.annotation.Target;

	@Target(ElementType.TYPE) // 类型
	@Retention(RetentionPolicy.RUNTIME) // 保留信息且执行时加载
	@Documented // javadoc之类的工具处理

	/*
	 * @interface是一个关键字
	 */
	public @interface Description {
		String value();
	}
Annotation类型里面的参数该怎么设定: 
	第一,只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型. 
	第二,参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和String,Enum,Class,annotations等数据类型,以及这一些类型的数组.例如,String value();这里的参数成员就为String. 
	第三,如果只有一个参数成员,最好把参数名称设为"value",后加小括号.例:上面的例子就只有一个参数成员.

2、Name.java 
	import java.lang.annotation.Documented;
	import java.lang.annotation.ElementType;
	import java.lang.annotation.Retention;
	import java.lang.annotation.RetentionPolicy;
	import java.lang.annotation.Target;

	//注意这里的@Target与@Description里的不同,参数成员也不同
	@Target(ElementType.METHOD) // 方法
	@Retention(RetentionPolicy.RUNTIME) // 保留信息且执行时加载
	@Documented // javadoc之类的工具处理

	/*
	 * @interface是一个关键字
	 */
	public @interface Name {

		String originate();

		String community();
	}
	
3、Tarena.java 
	@Description("科澜,用全面的引擎 驱动多变的未来!")
	public class Coorun {
		@Name(originate = "科澜", community = "业软部")
		public String getName() {
			return null;
		}

		@Name(originate = "业软", community = "项目组")
		public String getName2() {
			return "Java,HelloWorld!";
		}
	}
	
4、最后，写一个可以运行提取hzu_OpenSource信息的类TestAnnotation
	package com.kelan;

	import java.lang.reflect.Method;
	import java.util.HashSet;
	import java.util.Set;

	public class TestAnnotation {
		@SuppressWarnings({ "rawtypes", "unchecked" })
		public static void main(String[] args) {
			String CLASS_NAME = "com.kelan.Coorun";
			try {
				// Class.forName(xxx.xx.xx)的作用是要求JVM查找并加载指定的类,也就是说JVM会执行该类的静态代码段
				Class test = Class.forName(CLASS_NAME);
				/*
				 * 如果指定类型的注释存在于此元素上,否则返回false
				 */
				boolean flag = test.isAnnotationPresent(Description.class);
				if (flag) {
					/*
					 * 返回改程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null
					 */
					Description des = (Description) test.getAnnotation(Description.class);
					System.out.println("描述: " + des);
					System.out.println("-----------");
				}
				// 获取本类以及父类或者父接口中所有的公共方法
				Method[] method = test.getMethods();
				Set<Method> set = new HashSet<Method>();
				for (int i = 0; i < method.length; i++) {
					boolean otherFlag = method[i].isAnnotationPresent(Name.class);
					if (otherFlag) {
						set.add(method[i]);
					}
				}
				for (Method m : set) {
					Name name = m.getAnnotation(Name.class);
					System.out.println(name.originate());
					System.out.println("创建的社区: " + name.community());
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
5、运行结果
描述: @com.kelan.Description(value=科澜,用全面的引擎 驱动多变的未来!)
-----------
科澜
创建的社区: 业软部
业软
创建的社区: 项目组




















